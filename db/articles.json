{"title":"Bringing TensorFlow to Pharo","subtitle":"A Google Summer of Code 2023 Project Proposal","slug":"bringing-tensorflow-to-pharo","body":"![](https://blog.sebastiansastre.co/assets/TensorFlowPlugin.jpg)\n\nPharo is a powerful open-source Smalltalk-based programming language and environment that has been widely used for research and development in various fields. Specially Pharo at [Inria](https://inria.fr), France's National Institute for Research in Digital Science and Technology.  However, the lack of a native plugin for [TensorFlow](https://www.tensorflow.org/), a popular open-source machine learning framework, has been a major limitation for high efficiency AI development with Pharo. I've wrote this post to let you know that, I've proposed a Google Summer of Code 2023 project to create a [TensorFlow plugin for Pharo](https://gsoc.pharo.org/tensor-flow-plugin), which will unlock the full potential of Pharo for production grade AI development.\n\nThe goal is to create a TensorFlow plugin for [Pharo](https://pharo.org/) that can be used directly by Pharo's C VM, allowing Pharo to take full advantage of the silicon of your graphical processing unit so you have an efficient and powerful way to do mining of that GPU power for any algebra intensive peoject, Machine Learning and AI projects in particular. With this plugin, Pharo will be able to perform AI tasks such as deep learning, neural network training, and image recognition using TensorFlow with no need for additional bridges or third-party libraries that could add significant complexity to any project setup and development and debug process.\n\nThe completed project has the ambition to deliver a plugin that provides all the primitives to the TensorFlow API, with at least one unit test to ensure quality assurance. This will enable Pharo developers to use TensorFlow for world class AI development, making Pharo a top-tier platform for machine learning or any synthetic intelligence application.\n\nThe project requires basic C programming skills, familiarity with how the Pharo VM is created, basic familiarity with Slang, and strong communication skills. Prior experience in creating a Pharo plugin is preferred.\n\n[Extending the Squeak Virtual Machine](https://rmod-files.lille.inria.fr/FreeBooks/CollectiveNBlueBook/greenberg.pdf) by Andrew C. Greenberg is a great read for getting up to speed on the basics of extending Smalltalk VM functionality.\n\nTogether with Sebastian Jordan and Oleksandr Zaitsev from the Pharo community, we'll mentoring the students taking on this project to help them make it real. As a first step in this direction, I've published [How to Create a Pharo Smalltalk Plugin](https://blog.sebastiansastre.co/article/how-to-create-a-pharo-smalltalk-plugin) here to remove any friction of the developing process of Pharo plugins.\n\nHoping Google likes it and becomes real!\n\nWant to be part of this?\n\nCheck the eligibility criteria in [Google Summer of Code 2023: Call for Students](https://gsoc.pharo.org/) and help us make this a new impactful resource for a new reality.\n\nCreating a TensorFlow plugin for Pharo is an important step towards unlocking the full potential of this powerful language for AI development. I believe that this Google Summer of Code 2023 project will be an exciting opportunity for any student who is passionate about machine learning and interested in contributing to an open-source community. With the right skills and guidance, we can make TensorFlow a first-class citizen in the Pharo ecosystem, and enable Pharo developers to take on AI challenges with confidence.","createdAt":"2023-02-16T16:53:59.633Z","updatedAt":{"$$date":1676569434241},"tags":[],"clapsCount":0,"excerpt":"Pharo is a powerful open-source Smalltalk-based programming language and environment that has been widely used for research and development in various fields. Specially Pharo at Inria, France's National Institute for Research in Digital Science and Technology.  However, the lack of a native plugin for TensorFlow, a popular open-source machine learning framework, has been a major limitation for high efficiency AI development with Pharo. I've wrote this post to let you know that, I've proposed a Google Summer of Code 2023 project to create a TensorFlow plugin for Pharo, which will unlock the full potential of Pharo for production grade AI development.","_id":"8NDN1YMK6q7n7n6V","publishedAt":"2023-02-16"}
{"title":"Debugging Announcement issues in Amber Smalltalk","subtitle":"","slug":"debugging-announcement-issues-in-amber-smalltalk","body":"Using an Announcer can give you a lot of flexibility for making your Amber components interact loosely coupled.\n\nAnd while developing, is normal to rename a class. \n\nToday I've was working with a product and I had this announcement class with a typo `OrdedProductEditRejected` which I've renamed to `OrderedProductEditRejected`.\n\nNone of the current Amber IDE's have a refactoring tool to help you to rename globally and changing the methods that are using the class, so you have to go old school and rename in every place yourself.\n\nSo far so good. Until you forget to rename it in one method and your app uses that.\n\nWhat happens in the method using the old name, is that you get nil there and the announcer will throw an exception (nil does not understand #name).\n\nTrying to find references of the class doesn't work anymore because it already has the new name. And if you forgot the exact previous name, the search for references will not help.\n\nSo what do you do!?\n\nIn flow based applications, the App class implements on:do: in this way:\n\n```\nApp>>on: ann do: aBlock\n\n  self announcer on: ann do: aBlock\n```\n\nSo every time your code subscribes to observe an event it will send that message. Knowing that, you can debug this kind of problem by setting a halt so when the announcement class is nil it stops and you know what to fix.\n\nThis is how it looks:\n\n```\nApp>>on: ann do: aBlock\n\n  ann ifNil: [ self halt ].\n\n  self announcer on: ann do: aBlock\n```\n\nWith that, you use your application and when it halts, you'll see in the debugger's stack the sender you forgot to correct.","createdAt":"2019-09-08T17:57:59.054Z","updatedAt":{"$$date":1567965566365},"publishedAt":"2015-01-27","tags":[],"clapsCount":0,"excerpt":"Using an Announcer can give you a lot of flexibility for making your Amber components interact loosely coupled.\n\nAnd while developing, is normal to rename a class. \n\nToday I've was working with a product and I had this announcement class with a typo `OrdedProductEditRejected` which I've renamed to `OrderedProductEditRejected`.\n\nNone of the current Amber IDE's have a refactoring tool to help you to rename globally and changing the methods that are using the class, so you have to go old school and rename in every place yourself.","_id":"C2o06yYs4UgKmWvS"}
{"title":"Controller expression evaluation on render with Angular","subtitle":"How to evaluate an expression after an AngularJS controller has rendered?","slug":"controller-expression-evaluation-on-render-with-angular","body":"This is a really common need that AngularJS is not providing out of the box.\n\nI needed it myself for some projects and you might too?\n\nOk, even if many will tell you that you should not program in a way that needs to use this feature, I beleive that there is plenty of people that knows exactly what they are doing. There is plenty of cases that have real and justified reasons to use this feature and they can use it properly. In short, when adequate this do not necessarily implies bad design.\n\nSo here we go.\n\nWhat I'm using to get expressions evaluated after the render is a custom directive named, you guessed, `afterRender`:\n\n```\ndefine(['angular'], function (angular) {\n  'use strict';\n  return angular.module('app.common.after-render', [])\n    .directive('afterRender', [ function() {\n    var def = {\n        restrict : 'A', \n        terminal : true,\n        transclude : false,\n        link : function(scope, element, attrs) {\n            if (attrs) { scope.$eval(attrs.afterRender) }\n            scope.$emit('onAfterRender')\n        }\n    };\n    return def;\n    }]);\n});\n```\n\nTransclusion doesn't make sense here, so we set it false and is restricted to 'A' because, to be useful, what we want is to add this into any controller's template by adding it as an attribute like this:\n\n<div after-render></div>\n\nwhich will make the controller owning that piece of template able to observe the event `onAfterRender` fired by this directive and react with arbitrary code of its own.\n\nHere is an example of such controller's initialize method would look like:\n\n```\n$scope.initialize = function () {\n    // Makes this controller to have some default initial state and \n    // wires the reactions that belong to its concern.\n\n    $scope.$on('onAfterRender', function (){ $scope.thatGuyJustRendered()});\n\n};\n\n// Reacts doing this and that after that guy had rendered\n$scope.thatGuyJustRendered = function () {\n    console.log('yep, cool, this computes after that guy had rendered');\n};\n\n// ... other controller's methods ...\n\n$scope.initialize();\n```\n \nBonus\nThere is a bonus. But! this is powerful so it comes with a disclaimenr: this is something not to be abused. I do not endorse bloating the views (templates) with logic because that's something that concerns the controller.\n\nSaid that, here is how you'd use it to run an arbitrary expression:\n\n<div after-render=\"$emit='onAfterThisConcreteThingRendered'\"></div>\n\nYou can put there where you see the $emit any expression you want but you should know that in all my real-world code using the after-render, I only use it to trigger specific events like in that example and program the reaction in the right controller that is wired up with reactions so it knows what to do.\n\nI hope you find it useful and let me know if you need help with it or have any remarks about it","createdAt":"2019-09-08T17:52:53.448Z","updatedAt":{"$$date":1567965349048},"publishedAt":"2015-03-11","tags":[],"clapsCount":0,"excerpt":"This is a really common need that AngularJS is not providing out of the box.\n\nI needed it myself for some projects and you might too?\n\nOk, even if many will tell you that you should not program in a way that needs to use this feature, I beleive that there is plenty of people that knows exactly what they are doing. There is plenty of cases that have real and justified reasons to use this feature and they can use it properly. In short, when adequate this do not necessarily implies bad design.\n\nSo here we go.","_id":"Dfv6Q2iENB3W9O8O"}
{"title":"Run brew cleanup and claim some disk space","subtitle":"","slug":"run-brew-cleanup-and-claim-some-disk-space","body":"I was doing a bit of housekeeping in my MacBook Pro so I can use some additional diskspace.\n\nThe starting point was to do a scan with [OmniDiskSweeper](https://www.omnigroup.com/more).\n\nOmniDiskSweeper's User Interface allows you to easily navigate the directories that are occupying space the most so you can investigate what in those big directories is actually useful and what can be archived.\n\nBeside the directories that was just fine to delete, my findings allowed me to see which ones was okay to archive to a big external disk. At the end of that scrutiny freeing the Trash freed up ~50GB which was a nice bunch :)\n\nAnd then I saw Cellar occupying a lot and I've  found that I had 6 versions of MongoDB. I only use the latest stable and I have no reason to keep the older ones.\n\nSo, if you like me, use brew and don't need to keep older versions of the installed applications and libraries, then doing a cleanup in brew is really handy.\n\nFor me today was ~5GB handy :)\n\nRun `brew cleanup -n` to see which packages would be removed, and when you feel ready hit it with a `brew cleanup`","createdAt":"2019-09-08T17:44:54.907Z","updatedAt":{"$$date":1647375231175},"publishedAt":"2015-03-12","tags":[],"clapsCount":0,"excerpt":"I was doing a bit of housekeeping in my MacBook Pro so I can use some additional diskspace.\n\nThe starting point was to do a scan with [OmniDiskSweeper](https://www.omnigroup.com/more).\n\nOmniDiskSweeper's User Interface allows you to easily navigate the directories that are occupying space the most so you can investigate what in those big directories is actually useful and what can be archived.","_id":"F2uzIeiPX2GbHQLh"}
{"title":"PharoDawnTheme updated","subtitle":"Working in Pharo 9 and 10","slug":"pharodawntheme-updated","body":"![](https://blog.sebastiansastre.co/assets/PharoDawnTheme.png)\n\nToday, I'm excited to announce a new release of [PharoDawnTheme](https://github.com/sebastianconcept/pharodawntheme), this dark warm color theme for the Pharo Smalltalk IDE. \n\nThis theme is available for Pharo 9 and 10  and can be found in the following URL: https://github.com/sebastianconcept/pharodawntheme.\n\nTo install it either in Pharo 9 or 10 you can evaluate this in a playground:\n\n```smalltalk\nMetacello new \n\tbaseline: 'PharoDawnTheme';\n\trepository: 'github://sebastianconcept/PharoDawnTheme';\n\tload.\n```\n\nPharoDawnTheme is designed to make the development experience in Pharo more enjoyable and efficient. The theme has been optimized for readability and usability, giving developers a more comfortable and efficient development environment resolving some issues found in other themes. \n\nThis Dawn theme incorporates modern aesthetics, making your Pharo code look gentle and inviting and removing exaggerated and improperly distracting highlights.\n\nI believe that Pharo developers deserve an environment that gets out of their way and allows them to focus on the goals and concepts they aim to master with their code. With PharoDawnTheme, I've tried to provide a theme that enhances the software development experience as much as a color theme can.\n\nWe invite you to try out this theme and see how you feel it.\n\nAnd if you find any issues don't hesitate in opening one in GitHub. ","createdAt":"2023-02-01T21:37:25.670Z","updatedAt":{"$$date":1675356466132},"tags":[],"clapsCount":0,"excerpt":"Today, I'm excited to announce a new release of [PharoDawnTheme](https://github.com/sebastianconcept/pharodawntheme), this dark warm color theme for the Pharo Smalltalk IDE. \n\nThis theme is available for Pharo 9 and 10 ","_id":"FMw5DKxhAqjGuGDB","publishedAt":"2023-02-01"}
{"title":"App, main and other controller accessors","subtitle":"Some thoughts on flow's common practices in the front-end","slug":"app,-main-and-other-controller-accessors","body":"When I've started flow, one of the features I wanted for it was scaffolding from the front-end and be able to do things like:\n\n> Flow scaffold model: #User\n\nor:\n\n> Flow scaffold crudFor: #Task \n\nand have created the Model and Controller classes and accessors in environment so you can continue developing the app pulling things from there.\n\nThere are several reasons to have scaffolding features, the utilitarian and most pragmatic reason is that it helps you to show something useful fast. A cheap positive feedback loop that allows you to scaffold the next basic feature of your app. That's something really aligned with flow's mission regarding to productivity.\n\nA secondary good reason is that scaffolding makes it easier to spread basic good practices. It shows by example to new people how to get new models and controllers in an application that can scale in complexity with elegance and high maintainability.\n\nBut I'm not implementing scaffolding just yet.\n\nThe reason why is not being done yet is because we are still in discovery mode of what are those practices. The idea is to really confirm if they are common, general and frequent enough.\n\nIn this article, I'm going to share the current best candidates for those good practices. If I'd have to implement the scaffolding system today, I'd make it build the App and its main controller, the main controller accessors, models and router and here I'd show you how. Also we'll cover here what's the suggested convention to name things and why is convenient to do it that way.\n\n**App and main**\nSince version 0.2.7, a flow-based application has the idea of App and main. A default clone of the flow repo will use the App class and MainController class for a sample tutorial-like application.\n\nThe App class is a convenient starting point to access and \"talk with your app\" whatever app it is. In flow we asume you'll have to investigate things on your app and its controllers so we are trying to make that easy for you. One way is providing easy navigation. Here is how you access the main controller of your application which is the root of the controller's graph.\n\"Used by index.html to start your app.\"\n\n> App start.\n\n> \"Deals with routes definition and is part of the starting process of your frontend.\"\n> App setupRouter.\n> \n> \"Accessor to the instance of MainController of your app.\"\n> App main.\n\nTake the last one for example, it's 2 words, one of 3 characters the other has 4. Really friendly to type. Amber doesn't have autocomplete so by choosing two short words, we are lowering the friction to access the root controller of your application so you can easily inspect, send commands and see how it reacts. Is safe to say it will be used a lot so you'll profit a lot. For example, an inspect on that code allows you to navigate to any controller that got currently instantiated. That makes easy diagnose possible issues and prototype live-coding the next feature.\n\nThe MainController should have as minimum two methods: #home and #reset. You should be able to do:\n\n> \"Get to the default state on the main controller.\"\n> App main reset.\n> \n> \"Answers the 'home' controller of the app.\"\n> App main home.\n> \n> Here is code that implements the #reset method taken from a real application:\n> MainController>>reset\n>  \n self navbar deactivateAll.\n \n>  self hideAllBut: #navbar.\n>  \n>  self home show \n>  \nThat reset method makes the app to instantly show the home without any blinks on the screen.\n\nAccessors\nNow take a look at the #home accessor\n\n> MainController>>home\n>  \"Answers the home controller of the app.\n>  Creates it lazily if needed.\"\n> ^ self ifAbsentAt: #home put: [\n>    HomeController\n>      for: model \n>      on: self\n>      appendingTo: ‘#home-wrapper’ asJQuery ]\n\nSo by just naming it with `App home`, you get it created. Once created, you get that instance as answer every time. That's as close as you can be to zero friction between developer's wish and reality (machine's answer). Just the way things should be.\nNote we are using here the class method to instantiate controllers: #for:on:appendingTo:\n\n> Controller class>>for: aModel on: aParentControllerOrNil appendingTo: aHtmlElement\n>   “Answers a new instance of this controller dedicated to aModel,\n>   child of aParentControllerOrNil and meant to be \n>   appended to aHtmlElement.”\n>   ^ self new\n>    model: aModel;\n>    parent: aParentControllerOrNil;\n>    parentElement: aHtmlElement;\n>    yourself\n\nLets take a look at what it expects:\n* In the for: part it expects the model for the new controller\n* In the on: part it expects the parent controller, a MainController in this case. \n\nNote that the parent controller has sense to be nil only when you instantiate the MainController which is a controller that is the root of the whole graph of controllers.\n\nIn the appendingTo: part it expects a DOM element to be the parent element of whatever that new controller needs to render. Typically that would be a <div> with an id named consistently with the controller class name plus the 'wrapper' suffix as you see in that snippet.\nThe tutorial sample application of a default flow clone has 5 subcontrollers covering from the most basic template based controllers to two-way data binding, composition and client-server RESTful interactions. On its MainController you find 5 accessors: example1, example2, etc. up to example5. They all use the same idea of this #home accessor.\n\n**Models**\n\nModels in flow are really friendly. Creating the class is enough to start using them. They are Mapless objects which means you don't really need to declare in advance what instVars and accessors they need to have in order to be usable by your application.\nThis makes really easy to work in a prototypical way encouraging discovery and experimentation, two really strategic features for innovation projects and startups.\nAny subclass of Model you add is going to be a Mapless. So basically you only care about the model name and add all your model classes. Later you add the methods that makes them to have special behaviour.\nAs general rule, Mapless don't need setters and getters, they use DNU to get and set automatically whatever you tell them to. They will answer nil when you ask for something they don't have.\nIn the following snippet we create an instance of the Visitor class, we set the language according to the browser and we save it in the backend:\n\t\n> \"Create a model of the visitor, set its current language and\n> saves it in the backend.\"\n> | visitor |\n> visitor := Visitor new.\n> visitor language: window navigator language.\n> visitor save.\n> This feature of DNU and returning nil makes them a bit different if you want to have lazy initializations on some of their properties.\n> How does it look a lazy initialization in a mapless?\n> Here is another example taken from real code:\n> Order>>products\n>   \"Answers the products in this order.\n>   Creates the empty collection if needed.\"\n>   super products ifNil: [\n>    self products: OrderedCollection new ].\n>  \n>    ^ super products\n\n**Routes**\n\nLets dig now on the routing system used in flow applications. It all begins at load time. When the frontend is being loaded by your browser using RequireJS, it comes to a moment where it installs the 'App' package containing the App class and all the other classes and methods of your application.\n\t\nWhen Amber installs classes on the package loading process, the classes will receive the initialize message on its class side. If there is none, nothing special will happen but if your class implements it, it will perform those custom actions.\n\t\nIn flow, we use this:\n\t\n> App class>>initialize\n> self setupRouter\n\nSo even before he application starts, it already will have the router programmed to react correctly to whatever your app should do with the given initial and following URIs.\n\nLets see the setupRouter now:\n\n> App class>>setupRouter\n>   \"Program the application reactions for different URI routes.\"\n>   Router rlite\n>    \"Normalization of the home route.\"\n>    add: ‘’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘#’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘#/’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘/’ do: [ :r | Router set: ‘#/home’ ];\n>    add: ‘home’ do: [ :r | App main reset ];\n>    \"Reactions related to Contact models\"\n>    add: ‘contacts’ do: [ :r | App main showContacts ];\n>    add: ‘contacts/:id’ do: [ :r | \n>      Router set: ‘#/contacts/’,r params id,’/view’ ];\n>    add: ‘contacts/new’ do: [ :r | App main showNewContact ];\n>    add: ‘contacts/:id/view’ do: [ :r | \n>      App main showContactId: r params id ];\n>    add: ‘contacts/:id/edit’ do: [ :r | \n>       App main editContactId: r params id ];\n>    add: ‘products’ do: [ :r | App main showProducts ];\n>    add: ‘products/:id’ do: [ :r | \n>      Router set: ‘#/products/’,r params id,’/view’ ]; \n>    add: ‘products/:id/view’ do: [ :r | \n>      App main showProductId: r params id ];\n>    add: ‘search/:target’ do: [ :r | \n>      App main showSearchResultsFor: r params target ];\n>    yourself\n\nAt this point you'll see that the code is quite self explanatory which is one of the guiding principles behind flow. In the same way this example uses #showNewContact, #showContactId: and editContactId: you would do different routes for different models on your own application.\nBonus\nAs a bonus, here is how #editContactId: looks like:\n\t\n> MainController>>editContactId: anId\n>   self hideAllBut: #navbar.\n>   self contactEditor editId: anId\n\nThe editor accessor that you already can infer:\n\n> \tMainController>>contactEditor\n> ^ self ifAbsentAt: #contactEditor put: [\n>    ContactEditorController\n>    on: self\n>    appendingTo: ‘#contact-editor-wrapper’ asJQuery ]\n> \t\nThe #editId: on the editor controller taking the model from the backend:\n\n> \tContactEditorController>>editId: anId\n>   self showPreloader.\n>   Person\n>    findOne: #{ ‘_id’ -> anId }\n>    then: [ :person |\n>      self editContact: person.\n>      self hidePreloader ]\n>    ifNone: [ ]\n>    onError: [ :res | self showError ]\n\nAnd finally:\n\n> \tContactEditorController>>editContact: aPerson\n>   self model: aPerson.\n>   self show done: [ \"specific stuff\" ]\n\nThe #show method in Controller always return a promise so you can do your own custom stuff when the view gets created asynchronously without complicating your code.\nSo we don't have yet scaffolding today (January 2015) but I hope this article encourages you to write highly readable code on flow.\n\nHappy coding!","createdAt":"2019-09-08T00:57:47.442Z","updatedAt":{"$$date":1567964303041},"tags":[],"clapsCount":0,"excerpt":"When I've started flow, one of the features I wanted for it was scaffolding from the front-end and be able to do things like:\n\n> Flow scaffold model: #User\n\nor:\n\n> Flow scaffold crudFor: #Task \n\nand have created the Model and Controller classes and accessors in environment so you can continue developing the app pulling things from there.","_id":"GETUD6ZfKKlcgFKU","publishedAt":"2014-11-12"}
{"title":"Flow demoed at Smalltalks2014","subtitle":"","slug":"flow-demoed-at-smalltalks2014","body":"![](https://miro.medium.com/max/2560/1*bh9KXrRuT1gNP9B3xcakDA.jpeg)\nIn November 5, 6 and 7th I was at Smalltalks2014 where I presented a talk about Startups and Smalltalk that mentions flow.\n\nI want to say a thanks to the organizers for having me there to bring this topic that gave me the opportunity to share this information among many Smalltalk enthusiasts, but also because I met new friends and found some old ones.\n\nOne common theme I've found: I had many great and deep conversations with lots of them. There is something fundamental that is interesting about this technology that seems to make people to be really conscious and thoughtful.\n\nSpecial thanks to Esteban Maringolo for being a great roommate and pal; to Facundo Vozzi for having big laughs and teaching me about new beers; to Boris Shingarov for deep technical talks about Cathedral's organs and going from the Plank Scale to the Cosmos in half second; to Andrés Valloud for being that pre-adolescent friend sharing games in floppy disks in the 90's rediscovered twenty years later presenting the notion of \"the kid's play is the man's work\"; to Peter Hatch for amazing deep chats and World Conquer plans and talking about George Carlin!; to Allen and Rebeca Wirsf-Brock for great long chats and being part of this Smalltalk invention and making JavaScript better; to Juan Vuletich for helping to figure out \"what should be maximized?\" when using Metcalfe's Law and to James Foster that so kindly showing me a fantastic way to work with Gemstone/S.\n\nThank you guys!!!\n\nAs you can see in the slides of the talk, one of the topics is Single Page Applications and flow is actually quite on topic about that.\nAt the end of the day, it was the \"Show your projects\" section and I demoed flow in about 10 minutes.\n\nIt was nicely received and the video of that might actually get published eventually. I'll share it as soon as I have news on that.\nOne thing that is worth mentioning is that, with Esteban Maringolo, we're actually thinking making a Mapless adaptor to Postgres and with the fantastic work of Sebastian Hiedbrink we had a pre-alpha of flow in Gemstone/S.\n\nCan you feel the power?\n\nExcited?\n\nWe are!\n\nHere are some photos\n\n![](https://miro.medium.com/max/5184/1*xZPUpLZ41JVGEF6AQGbHsw.jpeg)\n\n\nPeter Hatch giving his talk about Virtual Machines, Critical Thinking and Reliability\n\n![](https://miro.medium.com/max/6528/1*yi9RlJuRq9ygxoVBaIp2wg.jpeg)\n\n\nAndrés Valloud and me \"twenty years later\"\n\n![](https://miro.medium.com/max/6528/1*hgvNxj7QaqyaIZppEce8hw.jpeg)\n\n\nThanks to Esteban Maringolo for noticing that FAST has its own Chris Anderson in Hernán Wilkinson from 10Pines. You almost can notice how he is mesmerized by Nicolás Papagna's TED-style talk☺\n\n![](https://miro.medium.com/max/6528/1*kES4VocvIvy6uztlt-ZoEw.jpeg)\n\n\nFrom left to right: Esteban Maringolo, Jannik Laval, Sebastian Sastre, Adam Jacques, Prof. John Sarkela, Josh Fridstorm, Kurt Kilpela and","createdAt":"2019-09-08T01:22:32.582Z","updatedAt":{"$$date":1567906168239},"tags":[],"clapsCount":0,"excerpt":"![](https://miro.medium.com/max/2560/1*bh9KXrRuT1gNP9B3xcakDA.jpeg)\n\nIn November 5, 6 and 7th I was at Smalltalks2014 where I presented a talk about Startups and Smalltalk that mentions flow.\n\nI want to say a thanks to the organizers for having me there to bring this topic that gave me the opportunity to share this information among many Smalltalk enthusiasts, but also because I met new friends and found some old ones.\n\nOne common theme I've found: I had many great and deep conversations with lots of them. There is something fundamental that is interesting about this technology that seems to make people to be really conscious and thoughtful.\n","_id":"Go7wypT3Po8vjRTK","publishedAt":"2014-11-28"}
{"title":"Context is King","subtitle":"","slug":"context-is-king","body":"When you trust your content is when you can forget it. At that point you’ll get that Context is King.\n\n> …to make a Leonardo you need more than his innate ability. You also need Florence in 1450. \n> Paul Graham.\n\nYes I know… we are not da Vinci, we don’t have Florence in 1450 nor we have a Medici patron for our talent.\n\nFlorence in 1450 is context. The problem is that without an appropriate context talent is useless. To be fair, not useless but seriously compromised. That’s why talented people want to run away from places that are hostile to their talent and, the opposite of that problem: knowing how to build appropriated contexts will cultivate talent and open you more doors than working on the content. The good part: today is simpler and cheaper to build desirable contexts so wealth creation can find its way to be deployed in the world.\n\n**Some examples:**\n\n* A blank sheet of paper, something to write and a pleasant ambiance.\n* Your laptop + WiFi in an inspiring coffehouse.\n* To be able to write about high culture in a conversational tone.\n* A great story for you blog or, way better, book chapter.\n* When the world gives you the present of a synchronicity or a serendipity.\n* Your sketching tools and your favorite music in the background.\n* Finding the layout that works.\n* Your design when it has your rules and honors the basic principles at the same time.\n* To fit that image in the rule of thirds. And the right light and shadows!\n* When you make your model feeling natural and engaged during the shots.\n* Your camera and accessories in an historical moment.\n* To be able to capture technically well without being distracted by technical stuff.\n* When you can make your actors to inspire one to each other when filming.\n* Your musical instrument and a couple of friends.\n* To relax before an audition confident on your practices.\n* The visual finalization details of your site.\n* The usability of your application.\n* The ambiance you were able to architect.\n* A customer has a problem you can help with.\n* The results created by your movement before asking for donations.\n* To say “hello” with a sincere smile.\n* To listen your interlocutor’s problem.\n* To ask the right question.\n* When you renew the inspiration and hope of a member of your community.\n* Your intervention adding momentum to a project.\n\nBecause context is dynamic in nature, it can be very brief. When you get one that works take advantage of it putting all the momentum in the substance and commit to the truth. If you do that you can be sure you will be closer to some valuable things:\n\nThe identity of what you provide will be faithful to what you are.\n\nYour talents will have a better chance to shine over their opposite keeping what you don’t like in you at a safe distance.\nWhen something you don't like comes up, the feedback will be more useful because is the right input on the right problem, which leads to good diagnosis and good reviews and solutions.\n\nUltimately this is useful because all the contexts you manage to build are the real signature of your consciusness and you can be familiar with it while, unfortunately, most people don’t even know they have one.\n\n*Originally published in July 7, 2009. Reviewed in November 17, 2017*","createdAt":"2019-09-06T21:37:21.268Z","updatedAt":{"$$date":1567965616895},"tags":[],"clapsCount":0,"excerpt":"When you trust your content is when you can forget it. At that point you’ll get that Context is King.\n\n> …to make a Leonardo you need more than his innate ability. You also need Florence in 1450.\n> Paul Graham.\n\nYes I know… we are not da Vinci, we don’t have Florence in 1450 nor we have a Medici patron for our talent.","_id":"IEvcSpFiA0OGFfhk","publishedAt":"2009-07-07"}
{"title":"Controller based title change with Angular","subtitle":"How to make a website title to change based on the current controller","slug":"controller-based-title-change-with-angular","body":"Here is a tip on how to keep nice titles in your AngularJS-based SPA - Single Page Application.\n\nThe strategy is this:\n\n1. Remember current title (whatever it might be)\n2. Set the title to whatever new value you want\n3. Observe when the controller gets destroyed and\n4. React restoring that previous value in the title\n\n```\ncontrollers.controller('AmazingDetailController', [\n    '$scope',\n    '$window',\n    function ($scope, $window){\n\n      // Sets this controller with the expected initial state\n      // and perform any other initial activity needed\n      $scope.initialize = function () {\n\n         // Remember the previous title (whatever it might be)\n         $scope.previousTitle = $window.document.title;\n\n         $window.document.title = 'Amazing Detail!';\n\n         // Observes $destroy to restore the title of the page to its original\n         // value once user navigates out of this controller\n         $scope.$on('$destroy', function() {\n           $window.document.title = $scope.previousTitle;\n         });\n      };\n\n\n      // Does specific behavior 1\n\n      // Does specific behavior 2\n\n      // ...\n\n      // Does specific behavior N\n    \n\n      $scope.initialize();\n    }]);\n```\n\nA realistic use will probably be use a model that is coming from a service from the backend (or cache) or collaborating with other objects somehow. But this strategy is still valid, clean and works like a charm.\n\nEnjoy and let me know how it goes for you!\n","createdAt":"2019-09-08T17:49:00.464Z","updatedAt":{"$$date":1567965129998},"publishedAt":"2014-11-21","tags":[],"clapsCount":0,"excerpt":"Here is a tip on how to keep nice titles in your AngularJS-based SPA - Single Page Application.\n\nThe strategy is this:\n\n1. Remember current title (whatever it might be)\n2. Set the title to whatever new value you want\n3. Observe when the controller gets destroyed and\n4. React restoring that previous value in the title\n\n```\ncontrollers.controller('AmazingDetailController', [\n    '$scope',\n    '$window',\n    function ($scope, $window){\n\t\t...\n```","_id":"IiEOg1v0uA2Uuqbr"}
{"title":"The Smalltalk IDE I wish would exist","subtitle":"","slug":"the-smalltalk-ide-i-wish-would-exist","body":"When I was using Smalltalk in a daily basis I had the chance to understand quite well the things that would make productivity go high.\nHere are some sketches I’ve done. I didn’t do the debugger and the package manager system, and both of them have great impact on this but hopefully you can imagine how productive this could be.\n\n![](https://miro.medium.com/max/8192/1*ilwBqraykIpuum_qyG9CUw.jpeg)\n\n\nAll collapsed by default.\n\n![](https://miro.medium.com/max/8192/1*xpE6dTOv5A1tTn8s2n4FvA.jpeg)\n\n\nA bottom bar opens with focus on the input ready to evaluate anything or open common tools in one click or key combination.\n\n![](https://miro.medium.com/max/8192/1*q78OV588lkpJmwyK24DmVw.jpeg)\n\n\nThe classic time-proven Class Hierarchy Browser has two major changes: 1. it exposes a maximised hierarchy so abstractions can be visually inferred and exploration encouraged and 2. it has a permanently exposed input to a case-insensitive search that will help the user to frictionlessly jump to classes and method names.\n\n![](https://miro.medium.com/max/8192/1*oJ5fe8entfCczlhMENZjsg.jpeg)\n\nEverything can be clean again.\n\n![](https://miro.medium.com/max/8192/1*dZoK8NFM6-N9cmyYvi5zag.jpeg)\n\nFloating windows with snippets that can spawn from the main expression input at the lower-left. Floating windows are important because they allow drag-grop operations between them.\nOn the top of the code pane, the Class Hyerarchy Browser should have exposed a couple of buttons (no more than 4 to 6) with commands that should follow a cache strategy. They should be the absolutely most basic and frequently used commands, like remove method, find senders, find implementors, versions and perhaps not anything else (unless we have data that proves is a hot cache hit).","createdAt":"2019-09-08T01:09:31.780Z","updatedAt":{"$$date":1567905692434},"tags":[],"clapsCount":0,"excerpt":"When I was using Smalltalk in a daily basis I had the chance to understand quite well the things that would make productivity go high.\nHere are some sketches I’ve done. I didn’t do the debugger and the package manager system, and both of them have great impact on this but hopefully you can imagine how productive this could be.","_id":"JA4SwGxWvGUXjc72","publishedAt":"2015-06-02"}
{"title":"flow","subtitle":"A living full-stack ‎framework for the web","slug":"flow","body":"I’m starting this blog here to make a coder-friendly open conversation with contributors and enthusiasts about flow’s design.\n\nThis blog will be doing two things in one move:\n\n1. A source of fresh input, so feedback, so inspiration.\n2. An output about progress on this line of work, so relevance of the mission.\n\nBut lets back up a bit, what is flow after all?\n\nI like to say that flow is a mission with a framework.\n\nHere is [flow](https://github.com/flow-stack/flow)’s mission from the project’s [readme](https://github.com/flow-stack/flow/blob/master/README.md):\n\n> flow’s mission is to provide consultants, startups and software houses with a competitive [Smalltalk](https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html) full-stack framework that allows them to quickly deliver a demo with all the modern html5 features the market expects today (2014). The idea is that they can tactically use this framework to keep momentum up among their prospects and clients and scale things to full successful projects delivered by kickass productive teams or individuals.\n\nWhy [Smalltalk](https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html/) you might ask? Is a great question that should be experienced more than described, but if I have to tell you only three things about it, they will be around flow the psychological phenomenon embedded into the [principles of design](https://www.cs.virginia.edu/~evans/cs655/readings/smalltalk.html) of Smalltalk itself and I particularly want to highlight that they help with:\n\n*Intuition\nInstant feedback (discovery)\nPersonal mastery\n*\n\nDoes that resonate in you? I encourage you to join this effort!\n\nIt’s all open source, MIT License, and the project's Kanban is being organized in this open board you can join here.\nBy the way, I had the chance to presented flow at CampSmalltalkVI2014, big thanks to Sebastian Heidbrink for the hard work of organizing it and the invite!\n\nThere is no video about the talk but here are some slides I’ve made for it:\n\nflow: a living full-stack ‎framework for the web\n\n~900 views in a couple of days, and many shares? That’s a nice signal that we might just be into something here\nBeside a nice quantity of views on those slides what I like is the offline reception of the project and how people reacts to it during the few pairing session I had showing it. People is asking for the petshop sample app already!\n\nI have concrete needs of my own with the framework, mostly being pulled by my clients and projects. That's great because is validated needs that will eventually cascade features to the framework. So all that is expected to be a major drive of course.\n\nAt the same time I'm interested in innovation in general and how talented individuals and teams deal with innovation for their needs so I’m curious about how would you push this mission forward. I see this blog like a good opportunity to ask design questions and talk about it.\n\nIn the next posts I'll write about the current technical challenges and hopefully you might have good ideas to share on how to face them best.\n\nI'd like to expose things so people can understand why flow is a curated project and how it's being done.\n\nBut before digging ourselves into tech stuff too soon, let me ask you…\n\nWhat do you think about the mission?\n\nHow would you use it?\n\nIf not, what stops you in using it? What bumps or showstoppers have you found?\n\nHave your clients asked you to do Single Page Applications for them?","createdAt":"2019-09-08T16:50:26.725Z","updatedAt":{"$$date":1567961801097},"tags":[],"clapsCount":0,"excerpt":"I’m starting this blog here to make a coder-friendly open conversation with contributors and enthusiasts about flow’s design.\n\nThis blog will be doing two things in one move:\n\n1. A source of fresh input, so feedback, so inspiration.\n2. An output about progress on this line of work, so relevance of the mission.\n\nBut lets back up a bit, what is flow after all?\n\nI like to say that flow is a mission with a framework.\n\nHere is flow’s mission from the project’s readme:","_id":"MAbYq1exSun3n4j8","publishedAt":"2014-10-10"}
{"title":"Environmental state pollution","subtitle":"","slug":"environmental-state-pollution","body":"Situations in which a computer program does not have guaranteed the initial conditions of the environment in which it will run.\n\nExample:\nDisposable docker containers that are built without relying in external initial state i.e.: not mapping external volumes","createdAt":"2022-02-21T22:23:46.909Z","updatedAt":{"$$date":1645482768886},"tags":[],"clapsCount":0,"excerpt":"","_id":"O1GAppkWdlrRBqFE"}
{"title":"Testing","subtitle":"This article","slug":"testing","body":"For persistence in the host.","createdAt":"2022-02-20T23:44:24.158Z","updatedAt":{"$$date":1645530854647},"tags":[],"clapsCount":0,"excerpt":"","_id":"Wf5JG4xeurf5G4o6"}
{"title":"The way you understood it wrong","subtitle":"","slug":"the-way-you-understood-it-wrong","body":"When I was doing engineering, I had a very good algebra teacher.* Those where the days full of vectors and subspaces and subspaces of polynomials and matrices and subspaces of matrices of polynomials.\n\nAll from 7 a.m to 12 p.m.\n\nIn the middle of that math trench he said once something that my head really saved.\n\nThe teacher was explaining yet another concept while the sky was still dark in the morning and there was this guy that asked him to clarify a detail.\n\nThe question was asked and the teacher clarified.\n\nHe was a good teacher so, before moving on, he asked to this student if the idea was now understood.\n\nHe wanted this student validation.\n\nThe guy said ‘yes’ and right away this student started to describe all sorts of details about how he was reaching to the wrong conclusions by following an alternative reasoning based on the wrong assumptions he had while not having clear what he later asked about.\n\nThe teacher stopped him saying something I've never forgot:\n\nNo, no, wait, wait. Please do not explain me how you understood it wrong. Tell me instead how you're going to remember it right.\n \n ______\n \nUpdate: together with my good friend Pablo Dobrusin we joined efforts and figured out who the teacher was, he was Fernando Acero at FIUBA - Facultad de Ingeniería Universidad de Buenos Aires.\n\nTimeless insight.\n\nHats off to teachers like that.","createdAt":"2019-09-06T21:45:58.341Z","updatedAt":{"$$date":1567904033156},"tags":[],"clapsCount":0,"excerpt":"","_id":"cTQGfmAoHaW1qcCT","publishedAt":"2014-07-10"}
{"title":"Pharo image shutdown after an OS signal","subtitle":"How to use OS signals to do a clean shutdown of a Pharo image","slug":"pharo-image-shutdown-after-an-os-signal","body":"Sometimes you need to control how a worker image starts and stops right from the operative system. You my do it from the terminal but the really important use for this comes with automation and orchestration.\n\nIn airflowing, the Pharo worker images start and stop automatically and on command from the OS and in other to shutdown, the images use the technique I'm describing here.\n\nTo do thins you need 3 things:\n\n1. A VM process listening to the TERM signal\n2. A helper object to hold that VM process\n3. A reaction to handle that signal\n\nThe helper object usually instantiates on image start and holds a VM process running in the lowest priority. On start it will listen for the TERM signal:\n\n```\nHelper>>makeStopHook\n\n    \"Answers the process that hooks to the \n    OS signal that makes this worker to shutdown\n    when the VM process receives a TERM signal from\n    the OS.\"\n\n    ^ [|semaphore|\n        semaphore := OSProcess accessor forwardSigTerm.\n        semaphore wait.\n        self onTerminationSignal] \n            forkAt: Processor systemBackgroundPriority \n            named: 'Image TERM'.\n```\n\nThen you need to implement the reaction to handle that OS signal, and since you probably want a clean shutdown without preserving state, you can use:\n\n\n```\nHelper>>onTerminationSignal\n    \"The process for the VM of this image \n    has received a TERM signal from the OS.\n    React accordingly\"\n    \n    self log: 'That''s all folks. This worker is shutting down. Bye bye...' level:#messages.\n    OSProcess accessor restoreSigTerm.\n    SmalltalkImage current snapshot: false andQuit: true.\n```\n\n\t\t\n**Bonus**\nHere is what you do to stop the VM process on that image so you can do a clean exit on any services it might be providing:\n\n```\nHelper>>stopSignalProcesses\n    self isOnUnixLikeOS ifFalse:[^nil].\n    self log: 'Stopping stop hook...' level:#messages.\n    stopHook ifNotNil: [|value|\n            value := stopHook.\n            stopHook := nil.\n            OSProcess accessor restoreSigTerm.\n            value].\n```","createdAt":"2019-09-08T17:39:37.500Z","updatedAt":{"$$date":1567964675565},"publishedAt":"2015-02-10","tags":[],"clapsCount":0,"excerpt":"","_id":"fyQi0o2eMAVyuKMA"}
{"title":"Controller based title change in Angular","subtitle":"A technique to change the title of your AngularJS app as the user navigates each controller","slug":"controller-based-title-change-in-angular","body":"Here is a tip on how to keep nice titles in your [AngularJS](https://en.wikipedia.org/wiki/AngularJS)-based [SPA - Single Page Application](https://en.wikipedia.org/wiki/Single-page_application).\n\nThe strategy is this:\n\nRemember current title (whatever it might be)\nSet the title to whatever new value you want\nObserve when the controller gets destroyed and\nReact restoring that previous value in the title\n\n```\ncontrollers.controller('AmazingDetailController', [\n    '$scope',\n    '$window',\n    function ($scope, $window){\n\n      // Sets this controller with the expected initial state\n      // and perform any other initial activity needed\n      $scope.initialize = function () {\n\n         // Remember the previous title (whatever it might be)\n         $scope.previousTitle = $window.document.title;\n\n         $window.document.title = 'Amazing Detail!';\n\n         // Observes $destroy to restore the title of the page to its original\n         // value once user navigates out of this controller\n         $scope.$on('$destroy', function() {\n           $window.document.title = $scope.previousTitle;\n         });\n      };\n\n\n      // Does specific behavior 1\n\n      // Does specific behavior 2\n\n      // ...\n\n      // Does specific behavior N\n    \n\n      $scope.initialize();\n    }]);\n```\n\n\nA realistic use will probably be use a model that is coming from a service from the backend (or cache) or collaborating with other objects somehow. But this strategy is still valid, clean and works like a charm.\n\nEnjoy and let me know how it goes for you!","createdAt":"2019-09-08T16:59:20.251Z","updatedAt":{"$$date":1567964098878},"publishedAt":"2014-11-21","tags":[],"clapsCount":0,"excerpt":"","_id":"iuUxl1IY9lEy88g5"}
{"title":"Mapless repositories with UnQLite backends now can be on RAM","subtitle":"Added in-memory support for Mapless repositories using the UnQLite backend.","slug":"mapless-repositories-with-unqlite-backends-now-can-be-on-ram","body":"Just a quick update to mention that I've merged in `develop` a pull request that will add the capability to [work with Mapless using  UnQLite in memory](https://github.com/sebastianconcept/Mapless/issues/95).\n\nThe use case is mostly for single-image caching. When you want to cache  data but keep the image lean, that's when you can use this setup. \n\nHave in mind that when you save a mapless in one image, you will *not* find it from any other one, only from the one that originated that. You also need to be conservative with the instance of the repository because only one UnQLite client will have access to the data you saved on it. \n\nOf course if you need to access from many repository instances and many images, you can use the regular file-based one.\n\nFor reference, here is the snippet I was using while developing this:\n\n```smalltalk\ndbFilename := FileSystem workingDirectory / 'bench.db'.\ndbFilename.\ndbFilename deleteIfAbsent: [  ].\n\n\"File-based repo\"\nrepository := MaplessUnQLiteRepository for: dbFilename pathString.\n\n\"In RAM memory repo\"\nrepository := MaplessUnQLiteRepository inMemory.\n\n\"To shut down cleanly\"\nrepository shutDown.\n\n\"Run the benchmark\"\nMaplessUnQLiteBenchmark runOn: repository.\n\n\"Manually test saving and retrieving\"\nguy := DummyPerson new\n\tfirstName: 'john';\n\tlastName: 'q';\n\tyourself.\n\n\"Save a mapless\"\nrepository save: guy.\n\n\"Monitor its ids (to access it from another image and things like that)\"\nid := guy id.\n\n\"Retrieve that mapless\"\nrepository findOne: DummyPerson atId: 'ep3affz7h8ecjv3doz91ww1ci'.\n```\t\n\nWhen I ran the benchmarks I've got:\n\n```\nBenchmarking Mapless on UnQLite in memory...\n\nSaved 1000 instances of MaplessDummyPerson in: 58 ms (~17294 saves per second)\nRead 1000 instances of MaplessDummyPerson in: 27 ms (~37626 reads per second)\nSaved 10000 instances of MaplessDummyPerson in: 551 ms (~18142 saves per second)\nRead 10000 instances of MaplessDummyPerson in: 265 ms (~37698 reads per second)\nSaved 1000 instances of MaplessDummyPerson and MaplessDummyUser in: 132 ms (~7577 saves per second)\nRead 1000 instances of MaplessDummyPerson and MaplessDummyUser in: 39 ms (~25448 reads per second)\nSaved 10000 instances of MaplessDummyPerson and MaplessDummyUser in: 1328 ms (~7527 saves per second)\nRead 10000 instances of MaplessDummyPerson and MaplessDummyUser in: 406 ms (~24616 reads per second)\n```\nAnd here is how `DummyPerson` and `DummyUser` mapless get created:\n```smalltalk\nguy := DummyPerson new\n\tfirstName: Character alphabet shuffled anyOne asString;\n\tlastName: Character alphabet shuffled anyOne asString;\n\tyourself.\nuser := DummyUser new\n\tusername: guy firstName;\n\tperson: guy;\n\tyourself.\n``` \n\nHappy Eastern to everyone.","createdAt":"2022-04-15T15:51:29.967Z","updatedAt":{"$$date":1650050449713},"tags":[],"clapsCount":0,"excerpt":"Just a quick update to mention that I've merged in `develop` a pull request that will add the capability to [work with Mapless using  UnQLite in memory](https://github.com/sebastianconcept/Mapless/issues/95).\n\nThe use case is mostly for single-image caching. When you want to cache  data but keep the image lean, that's when you can use this setup.","_id":"oDlzFUjy9uTJr3Br","publishedAt":"2022-04-15"}
{"title":"Improving the Amber Experience","subtitle":"Some small steps to improve the productivity and overall experience of developing with Amber Smalltalk","slug":"improving-the-amber-experience","body":"There are many things we can do to have an Amber Smalltalk IDE that makes the difference in terms of developing experience and productivity. The best ones take a lot of effort that is currently unfunded.\nMaybe we should start a Kickstart campaign and change that. But in the meantime why not do smaller steps in the right direction? We could do small incremental improvements with what we already have.\n\nSo for now, let’s take a look at the current IDEs: Helios and Legacy IDE.\n\nWhy I don’t like Helios?\n\nFirst of all, is totally okay to like Helios and I personally liked that Nicolas tried to innovate on the Smalltalk IDE design. I’ve talked with him many times about it and I’ve helped to implement it with some contributions in the inspector and workspace.\nInnovation on the Smalltalk IDE it’s not something trivial because the traditional designs are extremely well validated and pass the test of time.\n\nStill, there is room to innovate the Smalltalk IDE and truth is that even I have already some drafts on what a rockstar Smalltalk IDE would be. I’m validating its design with some inner-circle veteran developers before any disclosing or deciding to do anything beyond some UX/UI drafts.\n\nThe thing is I’ve tried hard with Helios and it really didn’t work for me. You could say that is a matter of preference on developing taste for stateful User Interfaces, like “are you a vi person or a non-vi person?”\n\nBut is not.\n\nWith time I’ve got some muscular training on getting the right key combinations and end up doing things apparently fast. It wasn’t. The deal-breaker for me was a pragmatic test on plain old productivity.\n\nHelios takes too much time to pop-up and open and hides some actions behind a wall of sequenced keystrokes while the classic IDE provides an instant embedded open and is more “mouse friendly.”\n\nIn the end, Economics decided for me. Yes, Helios could connect to a remote environment but (a) that does not happen today and (b) might never do because the development of that feature, sadly, is not moving forward. The day to day result is that Helios made me overall less productive and slower than using the good old Legacy IDE.\n\nHence the divorce.\n\nSo after moving away from it I’ve started to see new things and try to figure out new possibilities and I’ve come to the personal conclusion that for the goal of having a more productive and overall better User Experience developing with Amber, it would take significantly less effort to make the Legacy IDE way better than Helios way better.\n\nI am the only one perceiving this?\n\nHow do you use Amber to code? Here is a poll I’m running to understand this question better.\n\nI hope this doesn’t sound rhetorical because this is a genuine question I have. I can easily just fork and do the incremental adjustments I want to see done on the classic IDE or, I can bother myself in trying to amplify those benefits for the whole community.\nAnd I don’t know what to do yet.\n\nWhat do you think? Should I try to promote this Legacy IDE improvements and fixes in the official Amber repo or just fork? Please help this spread and leave a comment with your preference so our community can find it and know.\n\nHere is the issue I’ve tentatively opened:\nhttps://github.com/amber-smalltalk/amber-attic/issues/3\n\nStating these problems as a start:\n\n* Typography issues\n* Poor contrast issues\n* Focus issues\n* Lack of search keyboard shortcut\n* Tab close area too small\n* SUnit button alignment\n* Horizontal arrow keys should change the pane in focus (on Browser and SUnit)\n* Vertical arrow keys should change the selected list item when focus is in a list pane\n* Save button disabled on pristine\n* Class browse shortcut\n* Icons on the class list\n* Icons on the package list\n* Drag and drop to categorise methods\n* Marking changed packages\n* Visual feedback on successful commit finished\n* Visual feedback on failed commit (handle exception and display proper message)\n* Select and change theme easily and persist the preference on localStorage\n* Change theme to be dark by default","createdAt":"2019-09-08T01:07:40.680Z","updatedAt":{"$$date":1645530859319},"publishedAt":"2015-01-31","tags":[],"clapsCount":0,"excerpt":"","_id":"oZ2Y49AGr9cOacyM"}
{"title":"Mapless is online again","subtitle":"General project update and newly supported backends.","slug":"mapless-is-online-again","body":"After quite some time not having updates on [Mapless](https://github.com/sebastianconcept/Mapless), I've invested in getting it working for latests [Pharo](https://pharo.org) versions and incorporating and maturing its API and main features.\n\nToday's best Mapless version is `v0.5.0-alpha` and the remarks are: \n* MongoDB backend can now connect to [Replica Sets in a fault tolerant way](https://github.com/sebastianconcept/Mapless/issues/61)\n* On MongoDB Mapless can be [read from secondaries](https://github.com/sebastianconcept/Mapless/issues/54) and setting default and custom [read](https://github.com/sebastianconcept/Mapless/issues/76) and write concerns.\n* Updated its [PostgreSQL backend](https://github.com/sebastianconcept/Mapless/issues/79) using [Sven](https://github.com/svenvc)'s client [P3](https://github.com/svenvc/P3)\n* [Updated its Redis backend](https://github.com/sebastianconcept/Mapless/issues/73) by using [Masashi](https://github.com/mumez)'s [RediStick](https://github.com/mumez/RediStick)\n* Incorporated [UnQLite backend](https://github.com/sebastianconcept/Mapless/issues/84) using [Masashi](https://github.com/mumez)'s [PunQLite](https://github.com/mumez/PunQLite).\n\nI can't miss taking the chance here to send a big thanks for the PRs and conversations and all the code reviews and general input to [Esteban Maringolo](https://github.com/emaringolo). You are a very healty influence buddy!\n\nAlso, to notice that last week I've seen [Norbert](https://github.com/noha)'s announcement of updates in [OmniBase](https://github.com/pharo-nosql/OmniBase) and I've started to play with it. And with [SQLite](https://github.com/pharo-rdbms/Pharo-SQLite3). The idea was to evaluate them as possible next backends because there are use cases in which they can be a good fit.\n\nIn general, Mapless value proposition reveals itself as an interesting support for when you mostly want to self-host your data without being locked to a vendor. \n\nFor example, assuming you code was not entangled with backend's custom features and if you keep the devops and operations issues aside, your plan for migrating from MongoDB to PostgreSQL and vice versa, could be:\n\n*  Instantiating the new repositories used by your app. \n*  Provide a way for your Mapless to have its properties properly indexed for query optimization.\n*  Saving the data without further transformations.\n*  Rewriting your app's queries.\n\nThat's pretty much it. \n\nWith Mapless strategic value your app stays easy to work with and resilient and more adaptable to future changes.\n\nExample, lets assume we add Firebase and DynamoDB support for Maplees. You decide to implement your app on one of these and use them while convenient, but later you migrate from it because the platform policies and economic value turned out to misalign with your business. With Mapless, your capacity for executing such decision would not be as dramatic as it would for other tech-stacks.\n\nFor more about the project's direction, you can take a look at the [current](https://github.com/sebastianconcept/Mapless/issues) and [resolved](https://github.com/sebastianconcept/Mapless/issues?q=is%3Aissue+is%3Aclosed) issues in GitHub. Also, its [changelog](https://github.com/sebastianconcept/Mapless/blob/develop/changelog.md) is also fairly well maintained as I've tried not to miss anything important there.\n\nAnd I've started this [Reddit community](https://www.reddit.com/r/mapless_data/) to have a forum for the project's questions and as an effort to ease adoption.\n\nYou might also find me online in [Pharo's Discord server](https://discord.com/invite/QewZMZa) where there is a `#database` channel for all Pharo persistence related conversations and I'll will help as I can.","createdAt":"2022-04-10T20:05:34.572Z","updatedAt":{"$$date":1649686134817},"tags":[],"clapsCount":0,"excerpt":"After quite some time not having updates on [Mapless](https://github.com/sebastianconcept/Mapless), I've started to invest some efforts in getting it working for latests [Pharo](https://pharo.org) versions and incorporating and maturing its API and main features.","_id":"qlCbiGUNCwMy5BOK","publishedAt":"2022-04-10"}
{"title":"Accepting vs. Selective","subtitle":"A meditation on how the tension between being more accepting or more rigorous influences design.","slug":"accepting-vs-selective","body":"Keeping the engines running, understandably, demands attention and energy into maintaining the statu quo. A defence of the current state.\n\nThings that go under the hood, the engines that keeps things moving reliably and performing well, they usually demand tighter error margins in all its parts. The people that takes care of the engine need to be selective and rigorous to keep the system producing value.\n\nBackends’ internal parts comes to mind.\n\nThink DevOps. Think about DBA's and sysadmins and all the backend’s gatekeepers curating its reliability. In a strike of rigour, they will happily pospone progress and innovation if things doesn't fit. The profile here is being conservative to only allow what preserves the system’s current production of value.\n\nNow let’s see things from the other side.\n\nIn order to create better User Experiences you usually need to go in the exact opposite direction.\n\nA more accepting User Interface is a less rigorous and less selective interface. In other words, an interface that can be used by a more diverse audience. One that is usable by many people with many different forms to see and experience the world.\n\nFinding one, can, in theory, happen by accident or in semi-random attempts, but it's more interesting to think in what could happen if you have a bunch of folks intentionally pursuing that goal. What if they do that systematically?\n\nThey can raise the chances of getting there just because believing that they can makes them to pay more attention to detect when they have produced something that resonates with a wider audience.\n\nIf they find the thing that works for more people, those guys go from naïve experimenters to startup founders to change makers to hight-impact entrepreneurs.\n\nThe Lean Startup method is trying to help on that.\n\nAny product they will try to build, will intentionally be closer to the Robustness Principle.\n\nIn computing, the robustness principle, or Postel’s Law, is a general design guideline for software:\n\nBe conservative in what you do, be liberal in what you accept from others (often reworded as “Be conservative in what you send, be liberal in what you accept”).\n\nThis is really hard to do because it points the self-criticism (rigor) to oneself and intentionally deescalates the rigor and demands on others. This is usually the exact opposite of what the forces of the Ego ask you to do. The Ego will distract you from that because is basically a self-serving endpoint that neutralises network value creation.\n\nAnd here is the strategic opportunity:\n\nBecause is really hard to do, most people is simply not even willing to try so there is way less competition in that direction. \n\nBecause being more accepting and generous to others usually connects people (and that raises the value of the network).\n\nBecause is easier to distribute a product in a market if you know how to seduce it and generosity is the right start for that goal.\n\nThe Separation of Concerns between frontend and backend allows specialists to do their bests in each domain negotiating a sweet spot in this spectrum of tension between being more accepting vs. more selective.\n\nFullstack developers resolves this as inner-conflicts.\n\nAnd the way to level up the value for everybody in anything being made, is by constantly exposing the big picture so those specialists don’t get lost in micro-compartmentalized details that might easily diverge from a better future. When the specialists converge into something meaningful they can do something that people can believe in. When they are doing the thing, they can drive their energy inspiration and passion to it, instead of maintaining the statu quo by just doing the job.","createdAt":"2019-09-06T21:52:08.799Z","updatedAt":{"$$date":1567904258273},"tags":[],"clapsCount":0,"excerpt":"Keeping the engines running, understandably, demands attention and energy into maintaining the statu quo. A defence of the current state.\n\nThings that go under the hood, the engines that keeps things moving reliably and performing well, they usually demand tighter error margins in all its parts. The people that takes care of the engine need to be selective and rigorous to keep the system producing value.","_id":"vqilyV2pOp1E0PSu","publishedAt":"2015-01-23"}
{"title":"How to Create a Pharo Smalltalk Plugin","subtitle":"From zero to hero, build a HelloWorldPlugin on Pharo 9","slug":"how-to-create-a-pharo-smalltalk-plugin","body":"**Introduction**\n\nWhen working with Smalltalk, you sometimes wish to access functionality that exists only in a specific library or technology that you cannot or simply don't want to reinvent. When you are in this scenario, two options come to mind:\n\n1. FFI, or Foreign Function Interface, which is a mechanism to enable a program written in one programming language to interact with code written in another programming language. Essentially, a \"bridge\" that allows them to communicate and exchange information with each other.\n2. Somehow make the Smalltalk Virtual Machine to have more primitives that extend its default functionality to produce this communication back and forth, from the Smalltalk code and these other libraries.\n\nIn developing terms, FFI is usually the fastest way to achieve this and, for Pharo, is extensibly covered in [Unified FFI - Calling Foreign Functions from Pharo](http://books.pharo.org/booklet-uffi/pdf/2020-02-12-uFFI-V1.0.1) by Guillermo Polito, Stéphane Ducasse, Pablo Tesone and Ted Brunzie.\n\nIn this article, we'll delve into the less-traveled road of extending the Pharo Virtual Machine with an external plugin by creating a HelloWorldPlugin. With this, I want to provide some clarity that could demystify the process of making extensions in this way by understanding the steps currently needed to achieve this in Pharo 9, as per February 2023.\n\n**Motivation**\n\nThe primary motivation behind extending the Pharo Virtual Machine with a plugin is often performance, but in some cases, it can also simplify the process of accessing specific functionality. For instance, if you have a favorite library that can only be used by Python or Lua, as a Smalltalker, you may be forced to create a bridge to these technologies, adding additional setup instructions and increasing the complexity of your application's technology stack. With the use of plugins, however, you can extend Smalltalk and keep the complexity of your tech stack to a minimum. After all, Smalltalk when used keeping an elegant software design, can be considered a tool for dominating complexity.\n\nBack to performance, you will easily find cases where the FFI marshaling back and forth process might be considered too costly, and your Smalltalk application would find a more desirable alternative in getting dedicated primitives from a plugin to use the targeted functionality. You may be using plugins like FilePlugin, FloatArrayPlugin, SocketPlugin, and UnixOSProcessPlugin without even realizing it and, as you can imagine, they are all performance critical.\n\nLet's work on your new `HelloWorldPlugin` now. Here is the outline of the development cycle for it:\n\n```\n┌───────────┐                                \n│MyPlugins/ │                                \n└──┬┬───────┘               Plugin image     \n   ││  ┌──────────────────┐       │          \n   └┼─▶│HelloWorldPlugin/ │◀──────┘          \n    │  └──────────────────┘                  \n    │  ┌──────────┐                          \n    └─▶│pharo-vm/ │◀──────────────┐          \n       └──────────┘               │          \n                       Code to produce builds\n```\n\n**Setup procedure**\n\nYou'll need to do this once:\n1. A directory where you'll use a Pharo image for coding your plugin. Let's refer to this as \"the plugin image\".\n2. A directory with a clone of the [pharo-vm project](https://github.com:pharo-project/pharo-vm.git) \n3. In the plugin image, you'll install `BaselineOfVMMaker` which has all the infrastructure needed to produce the sources that you will later compile in a build process.\n4. In the plugin image, you'll checkout the `Pharo9` branch from origin for compatibility with this guide.\n\n**Development procedure**\n\nYou'll iterate this part producing builds of your plugin until you get to the final version:\n1. In the plugin image, you'll locally create a new branch using that `Pharo9` branch. That is your plugin development starting point. For this exercise we'll create a this branch naming it `HelloWorldPlugin`.\n2. In the plugin image, you'll add the code of the `HelloWorldPlugin` class and its methods.\n3. In the plugin image, you'll update (needed only once) which the external plugins are going to get generated adding `HelloWorldPlugin` to the list and you'll commit that. Note: you will only pick to commit that change and not any other automated change that Iceberg might detect.\n\n**Building procedure**\n\n1. From the `MyPlugin` directory, you'll run the `cmake` command to configure the environment for compilation.\n2. From the `MyPlugin/build` directory, you'll run the `make`  command to compile and produce the build.\n3. From the `MyPlugin/pharo-vm` directory, you'll edit `plugins.cmake` to make it include in the build the generated sources of `HelloWorldPlugin`.\n4. From the `MyPlugin` directory, you'll run the `cmake` command again to configure everything including the generated code of your plugin.\n5. From the `MyPlugin` directory, you'll run the `make` command to compile producing the binaries.\n\n**Note**: If you don't follow the sequence of the development cycle, you'll notice that `cmake` can easily run into problems by not finding the sources of `HelloWorldPlugin` automatically generated in `build/generated/64/plugins/src/HelloWorldPlugin`. The first round of `cmake` and `make` (steps 8 and 9) are not actually to produce the binaries you'll want, but only to have `make` producing the generated sources that you'll use *after* `plugins.cmake` gets edited to include your plugin and then built with step's 5 `make`.\n\n**Setup**\n\nGo to your favorite folder for your code and prepare a directory to work with this, here I'll call it `MyPlugins`:\n\n```\n$ cd ~/yourFavoriteCodeDirForThis\n$ mkdir MyPlugins\n$ cd MyPlugins\n```\n\nClone the Pharo code for building Pharo VMs:\n\n```\n$ git clone git@github.com:pharo-project/pharo-vm.git\n```\n\nCreate the `HelloWorldPlugin` directory to have the image to produce the new code, so go ahead ad grab a fresh pharo 9 and start it:\n\n```\n$ mkdir HelloWorldPlugin$ pwd\n...blah/MyPlugins/HelloWorldPlugin\n$  curl get.pharo.org/64/90 | bash\n$  curl get.pharo.org/64/vm90 | bash\n$ ./pharo\n```\n\nOff-topic, if you are like me, the first thing to do on fresh Pharo images is to tune the visuals by loading in a Playground:\n\n```\nMetacello new \n    baseline: 'PharoDawnTheme';\n    repository: 'github://sebastianconcept/PharoDawnTheme';\n    load.\n```\nNow, from this plugin image, add the repository from the cloned pharo-vm project using Iceberg and checkout the `Pharo9` branch:\n\n![Setup Iceberg to use the pharo-vm repository in the Pharo9 branch](https://blog.sebastiansastre.co/assets/addPharoVMRepo.gif)\n\nNow, load `BaselineOfVMMaker`:\n![Loading BaselineOfVMMaker](https://blog.sebastiansastre.co/assets/loadVMMakerBaseline.gif)\n\nNext, from the `Pharo9` branch, create the new `HelloWorldPlugin` branch:\n![Branch HelloWorldPlugin out of Pharo9](https://blog.sebastiansastre.co/assets/branchHelloWorldPlugin.gif)\n\nAnd now we can finally add your plugin code.\n\nGo to `SmartSyntaxInterpreterPlugin` class. This one will be the superclass of your plugin. \n\n**Important**: maintain `HelloWorldPlugin` in the `VMMaker-Plugins` package as required for automated code generation.\n\n```\nSmartSyntaxInterpreterPlugin subclass: #HelloWorldPlugin\n\tinstanceVariableNames: ''\n\tclassVariableNames: ''\n\tpackage: 'VMMaker-Plugins'\n```\nIn the **class side** of `HelloWorldPlugin` add the `moduleNameAndVersion` method:\n\n```\nmoduleNameAndVersion\n\n\t^ self moduleName ,Character space asString , Date today asString\n```\n\nIn the **instance side** of `HelloWorldPlugin` add the `primitiveGetHelloString` and `stringFromCString:` methods:\n\n```\nprimitiveGetHelloString\n\n\t<export: true>\n\tinterpreterProxy\n\t\tpop: 1\n\t\tthenPush: (interpreterProxy stringFromCString:\n\t\t\t 'Hello from your HelloWorldPlugin.')\n```\n\n```\nstringFromCString: aCString\n\n\t\"Answer a new String copied from a null-terminated C string.\n    Caution: This may invoke the garbage collector.\"\n\n\t<var: 'aCString' type: #'const char *'>\n\t| len newString |\n\t\n\tlen := self strlen: aCString.\n\tnewString := interpreterProxy\n\t\t             instantiateClass: interpreterProxy classString\n\t\t             indexableSize: len.\n\tnewString ifNil: [ \n\t\t^ interpreterProxy primitiveFailFor: PrimErrNoMemory ].\n\tself\n\t\tstrncpy: (interpreterProxy arrayValueOf: newString)\n\t\t_: aCString\n\t\t_: len. \"(char *)strncpy()\"\n\t^ newString\n```\n\nIf you're wondering about that unusual looking code, that's [Slang](http://wiki.squeak.org/squeak/slang), I'm not going to cover that here but is suffice for now to know that it's a code generation tool originally used in Squeak and now used to produce the Cog virtual machine used in Pharo. Slang converts Smalltalk code into C source code, which is then compiled to produce a virtual machine or, as you'll soon see, your `HelloWorldPlugin`. Slang basically helps to simplify the process of extending the Smalltalk virtual machine by providing an interface for generating multiplatform C code directly from Smalltalk code. This makes Smalltalk more maintainable and portable.\n\nDone and said that, you're almost ready to commit. The only missing piece of development is to tell `VMMaker` to use your class to create an external plugin.\n\nBrowse the `PharoVMMaker>>generate:memoryManager:` method and add the name `HelloWorldPlugin` to the array of `external` plugins.\n\nThe full method should be:\n```\ngenerate: interpreterClass memoryManager: memoryManager\n\n\t| platformDirectory |\n\tAuthor useAuthor: 'vmMaker' during: [ \n\t\tVMMakerConfiguration initializeForPharo.\n\t\t(interpreterClass bindingOf: #COGMTVM) value: false.\n\t\tplatformDirectory := self platformDirectoryFor: memoryManager.\n\t\t[ \n\t\t(VMMaker\n\t\t\t makerFor: interpreterClass\n\t\t\t and: StackToRegisterMappingCogit\n\t\t\t with: { \n\t\t\t\t\t #COGMTVM.\n\t\t\t\t\t false.\n\t\t\t\t\t #ObjectMemory.\n\t\t\t\t\t memoryManager name.\n\t\t\t\t\t #MULTIPLEBYTECODESETS.\n\t\t\t\t\t true.\n\t\t\t\t\t #bytecodeTableInitializer.\n\t\t\t\t\t #initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid }\n\t\t\t to: platformDirectory\n\t\t\t platformDir: platformDirectory\n\t\t\t including: #(  )\n\t\t\t configuration: VMMakerConfiguration)\n\t\t\tstopOnErrors: stopOnErrors;\n\t\t\tinternal: #(  )\n\t\t\texternal:\n\t\t\t\t#( FilePlugin SurfacePlugin FloatArrayPlugin HelloWorldPlugin );\n\t\t\tgenerateInterpreterFile;\n\t\t\tgenerateCogitFiles;\n\t\t\tgenerateExternalPlugins ] valueSupplyingAnswer: true ]\n```\n\nNow you can commit your changes completing the *development procedure* and ready to move on to the *building procedure*.\n\n![Commit the HelloWorldPlugin code in the HelloWorldPlugin branch](https://blog.sebastiansastre.co/assets/codeHelloWorldPlugin.gif)\n\nFor the building procedure and to evade a chicken-egg kind of problem, we're going to do a first round of running `cmake` and `make` commands that will autogenerate the C source code based on your methods written in slang and leave these source files ready to use at `build/generated/64/plugins/src/HelloWorldPlugin` (and likely also `build/generated/32/...`).\n\nGo to your `MyPlugins/` directory and run:\n\n```\n$ cmake -S pharo-vm -B build\n```\n\nAfter this run, you should see a list of plugins *without* `HelloWorldPlugin`, this is expected at this time. Also expected, is that you will not have yet the `build/generated/` directory. We are going to produce it in the next command.\n\nFrom `MyPlugins/build` run the `make` command to generate and compile everything for the first time:\n```\n$ make install\n```\nAt the end of this process, you should see that `build/generated/64/plugins/src/HelloWorldPlugin` does exists now.\n\nTime to tell cmake that it can configure a build including your generated sources. With your favorite editor open for editing the `MyPlugins/pharo-vm/plugins.cmake` file and add this above or below the configuration for `Surface Plugin`. We're basically going to tell `cmake` that it should do with `HelloWorldPlugin` the same as with `SurfacePlugin`, build it from the sources as an external plugin.\n\nYour edited `plugins.cmake` now should look like:\n\n```\n... \n#\n# HelloWorld Plugin\n#\n\nadd_vm_plugin(HelloWorldPlugin \n\t${PHARO_CURRENT_GENERATED}/plugins/src/HelloWorldPlugin/HelloWorldPlugin.c)\n\n#\n# Surface Plugin\n#\n\nadd_vm_plugin(SurfacePlugin \n\t${PHARO_CURRENT_GENERATED}/plugins/src/SurfacePlugin/SurfacePlugin.c)\n\n#\n# FloatArray Plugin\n#\n\nadd_vm_plugin(FloatArrayPlugin \n\t${PHARO_CURRENT_GENERATED}/plugins/src/FloatArrayPlugin/FloatArrayPlugin.c)\n...\n```\n\nNext, from `MyPlugins` directory, run `cmake` again:\n\n```\n$ cmake -S pharo-vm -B build\n```\nAnd at the end, you should find it lists your plugin:\n\n```\n... \n   B2DPlugin\n   BitBltPlugin\n   DSAPrims\n   FileAttributesPlugin\n   FilePlugin\n   FloatArrayPlugin\n   HelloWorldPlugin\n   JPEGReadWriter2Plugin\n\t...\n```\nAnd finally, to build your plugin, from `MyPlugins/build` run:\n\n```\n$ make install\n```\nOnce the compilation finishes, we can check the results. \n\nAs I'm doing this on `macOS` the resulting directory for the binaries is `build/vm/Debug/Pharo.app/Contents/MacOS/Plugins` .\n\nAnd there it is:\n```\n$ ls -la build/vm/Debug/Pharo.app/Contents/MacOS/Plugins \n$ build ls -la build/vm/Debug/Pharo.app/Contents/MacOS/Plugins \ntotal 83232\ndrwxr-xr-x  54 seb  staff     1728 Feb 10 19:01 .\ndrwxr-xr-x   4 seb  staff      128 Feb 10 19:01 ..\n-rwxr-xr-x   1 seb  staff   135352 Feb 10 19:01 libB2DPlugin.dylib\n-rwxr-xr-x   1 seb  staff    97864 Feb 10 19:01 libBitBltPlugin.dylib\n-rwxr-xr-x   1 seb  staff    35952 Feb 10 19:01 libDSAPrims.dylib\n-rwxr-xr-x   1 seb  staff    77256 Feb 10 19:01 libFileAttributesPlugin.dylib\n-rwxr-xr-x   1 seb  staff    88800 Feb 10 19:01 libFilePlugin.dylib\n-rwxr-xr-x   1 seb  staff    22352 Feb 10 19:01 libFloatArrayPlugin.dylib\n-rwxr-xr-x   1 seb  staff    17624 Feb 10 19:01 libHelloWorldPlugin.dylib\n```\nLet's see it in action:\n\n```\n$ build/vm/Debug/Pharo.app/Contents/MacOS/Pharo build/vmmaker/image/Pharo10.0.1-0-64bit-0542643.image --interactive\n```\n\nCreate an `Object` subclass:  `HelloWorld` class and add this instance method:\n\n```\ngetHelloString\n\n\t<primitive: 'primitiveGetHelloString' module: 'HelloWorldPlugin'>\n\tself primitiveFailed\n```\n\nAnd test it from this snippet:\n\n```\nSmalltalk vm listLoadedModules.\nSmalltalk vm listBuiltinModules.\n\nhello := HelloWorld new.\n\nhello getHelloString. \n```\n![Using the plugin primitive from Smalltalk](https://blog.sebastiansastre.co/assets/testingHelloWorld.gif)\n\nWith all going well, in your workspace you'll be getting the string produced by your new primitive.\n\nNotice that is you check `listLoadedModules` before using `getHelloString` your plugin is not going to be loaded but if you check after using it for the first time, you'll find it there showing that Pharo lazy loads the plugins.\n\n**Benchmarking**\n\nAs it gets revealed by now, creating a Pharo Smalltalk plugin requires significant effort, so to get a sense of proportions of what you get for it, lets compare how your plugin performs against a C shared library.\n\nRust is known to have a general computing performance almost at par with C so I've built this simple hello world lib [here](https://github.com/sebastianconcept/librusthelloworld) that can be used to measure this. The README.md file has instructions to build the library. \n\nGo ahead in and build it for release.\n\n```\n$ git clone git@github.com:sebastianconcept/librusthelloworld.git\n$ cargo build --release\n```\nYou will find the built library in:\n```\n$ target/release/librusthelloworld.dylib\n```\n\nCreate a symlink in the image dir so it can find `target/release/librusthelloworld.dylib`.\n\nCreate `RustHelloWorldLibrary` as subclass of `FFILibrary` and add this method in the *instance side*:\n```\nmacModuleName\n\t^ 'librusthelloworld.dylib'\n```\nCreate  `HelloWorld` as subclass of `Object` and on the class side add these three methods:\n```\nffiLibrary\n\n\t^ RustHelloWorldLibrary\n```\n```\ngetFFIRustHelloString\n\n\t^ self ffiCall: #( char * get_hello_world #( ) )\n```\n```\ngetHelloString\n\n\t<primitive: 'primitiveGetHelloString' module: 'HelloWorldPlugin'>\n\tself primitiveFailed\n```\n\nWith that, you'll have accessors to the strings that come from the lib in the FFI case and from the primitive of your plugin in the other case:\n```\nHelloWorld getFFIRustHelloString.\nHelloWorld getHelloString.\n```\n\nInstall ABBench for easy comparing bechmarks:\n```\nMetacello new\n  githubUser: 'emdonahue' project: 'ABBench' commitish: 'master' path: ''; \n  baseline: 'ABBench';\n  load.\n```\nAnd run some on these two methods.  \n\nHere are the results is showing in a 2.5GHz Intel Quad-core i7 on macOS:\n```\n[ HelloWorld getFFIRustHelloString ] bench. \n\"'402334.199 per second'\"\n[ HelloWorld getHelloString ] bench.   \n\"'22058210.074 per second'\"\n\nABBench bench:[ ABBench \n\ta: [HelloWorld getFFIRustHelloString] \n\tb: [HelloWorld getHelloString ] ]. \n\"B is 3087.45% FASTER than A\"\n```\n\n**Conclusion**\n\nExtending the Pharo Virtual Machine with a plugin is a less-traveled road, but one that offers a lot of potential. Whether you are looking to increase performance or simplify the process of accessing specific functionality, plugins can offer a way to extend Smalltalk in a way that keeps your technology stack simple, elegant and powerful.\n\nThe steps involved in producing a plugin are not as straightforward as with FFI, but with a little time and effort, you can create very powerful plugins that add new functionality to your Pharo applications. We hope that by working through the development cycle of a `HelloWorldPlugin` as described in this article, you can get a sense of the process involved and gain a deeper understanding of the Pharo Virtual Machine.\n\nOverall, extending the Pharo Virtual Machine with a plugin is an excellent way to maximize the potential of Smalltalk, and we hope this article has inspired you to take the next step in your Smalltalk development journey and unlocking potential. \n\n**Acknowledgements**\n\nA thank you note to the maintainers of the `paro-project/pharo-vm`, and Guille Polito in particular, which were kind enough to review and merge [this modest PR](https://github.com/pharo-project/pharo-vm/pull/445) which allows to quickly test that `PharoVMMaker` is able to generate the source code for the list of plugins that you define.\n\nAnd a very special mention to Pierre Misse-Chanabier which whom I had many conversations in june 2022 discovering how to get this done. Thanks a lot! None of this work would have been possible without your kind attention and explanations Pierre!","createdAt":"2023-02-09T22:48:08.429Z","updatedAt":{"$$date":1676211391715},"tags":[],"clapsCount":0,"excerpt":"When working with Smalltalk, you may wish to access functionality that exists in a specific library or technology that you do not want to recreate. In such cases, you have two options: creating an FFI bridge or extending the Smalltalk VM with new primitives. In this article, we'll explore the less common method of extending the Pharo Virtual Machine with an external plugin by creating a HelloWorldPlugin. The goal is to provide insight and clarity into the process of extending the VM in this manner, and to explain the steps involved in Pharo 9 as of February 2023.","_id":"yNWHTiwYAj3jNEUK","publishedAt":"2023-02-10"}
{"title":"Intuition Must Be an Item of your Specs","subtitle":"Smoothing the path to dominating complexity in an ever increasingly complex software.","slug":"intuition-must-be-an-item-of-your-specs","body":"One of the problems of the expert is to fall too soon into the details forgetting to make feasible for others to master them or even himself some years later when most of these details aren't fresh in his mind anymore.\nAlso to do the wrong abstractions\nAlso simplistic models.\nLeads to this problem:\nhttps://evanhahn.com/the-lone-developer-problem/\n","createdAt":"2023-02-28T12:55:54.381Z","updatedAt":{"$$date":1677589229664},"tags":[],"clapsCount":0,"excerpt":"","_id":"zYS9V2wRRcKN6E7G"}
